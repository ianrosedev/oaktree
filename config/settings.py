"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
import boto3

# Current environment
CURRENT_ENV = os.environ.get("CURRENT_ENV")


# AWS
ssm = boto3.client("ssm", region_name="us-east-1")
env_prefix = "/website/prod/"


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
if CURRENT_ENV == "dev":
    SECRET_KEY = os.environ.get("SECRET_KEY")
else:
    SECRET_KEY = ssm.get_parameter(Name=env_prefix + "SECRET_KEY", WithDecryption=True)[
        "Parameter"
    ]["Value"]

# SECURITY WARNING: don't run with debug turned on in production!
if CURRENT_ENV == "dev":
    DEBUG = True
    ALLOWED_HOSTS = []
else:
    DEBUG = False
    ALLOWED_HOSTS = ["ianrosedev.com", ".ianrosedev.com"]
    CSRF_TRUSTED_ORIGINS = ["https://ianrosedev.com", "https://*.ianrosedev.com"]
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True


# Application definition
INSTALLED_APPS = [
    # Core
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.forms",  # Required for django-markdownx
    # Third-party
    "taggit",
    "markdownx",
    "crispy_forms",
    "crispy_bootstrap5",
    "debug_toolbar",
    "storages",
    # Local
    "accounts.apps.AccountsConfig",
    "pages.apps.PagesConfig",
    "projects.apps.ProjectsConfig",
    "blog.apps.BlogConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
if CURRENT_ENV == "dev":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_NAME"),
            "USER": os.environ.get("POSTGRES_USER"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
            "HOST": os.environ.get("POSTGRES_HOST"),
            "PORT": 5432,
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": ssm.get_parameter(
                Name=env_prefix + "POSTGRES_NAME", WithDecryption=True
            )["Parameter"]["Value"],
            "USER": ssm.get_parameter(
                Name=env_prefix + "POSTGRES_USER", WithDecryption=True
            )["Parameter"]["Value"],
            "PASSWORD": ssm.get_parameter(
                Name=env_prefix + "POSTGRES_PASSWORD", WithDecryption=True
            )["Parameter"]["Value"],
            "HOST": ssm.get_parameter(
                Name=env_prefix + "POSTGRES_HOST", WithDecryption=True
            )["Parameter"]["Value"],
            "PORT": 5432,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"
USE_I18N = True
USE_TZ = True


# django-markdownx
FORM_RENDERER = "django.forms.renderers.TemplatesSetting"
MARKDOWNX_MEDIA_PATH = "markdownx/"
MARKDOWNX_IMAGE_MAX_SIZE = {"size": (500, 500), "quality": 100}
MARKDOWNX_MARKDOWN_EXTENSIONS = ["fenced_code", "codehilite"]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATICFILES_DIRS = [BASE_DIR / "static"]

if CURRENT_ENV == "dev":
    STATIC_URL = "static/"
    STATIC_ROOT = BASE_DIR / "staticfiles"
else:
    # AWS settings
    AWS_S3_VERIFY = True
    AWS_DEFAULT_ACL = None
    AWS_ACCESS_KEY_ID = ssm.get_parameter(
        Name=env_prefix + "S3_AWS_ACCESS_KEY_ID", WithDecryption=True
    )["Parameter"]["Value"]
    AWS_SECRET_ACCESS_KEY = ssm.get_parameter(
        Name=env_prefix + "S3_AWS_SECRET_ACCESS_KEY", WithDecryption=True
    )["Parameter"]["Value"]
    AWS_STORAGE_BUCKET_NAME = ssm.get_parameter(
        Name=env_prefix + "S3_AWS_STORAGE_BUCKET_NAME", WithDecryption=True
    )["Parameter"]["Value"]
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=31536000"}

    # S3 static settings
    AWS_LOCATION = "static"
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    # django-markdownx
    MARKDOWNX_MEDIA_PATH = "content/"

# Media files
if CURRENT_ENV == "dev":
    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"
else:
    # S3 media settings
    MEDIA_LOCATION = "media"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/"
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Custom user model
AUTH_USER_MODEL = "accounts.CustomUser"


# Redirects for when login is reqiured
LOGIN_URL = "/ianrosedevadmin/login/"
LOGIN_REDIRECT_URL = "/blog/"


# Email
if CURRENT_ENV == "dev":
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.environ.get("EMAIL_HOST")
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
    EMAIL_RECIPIENT_ADDRESS = os.environ.get("EMAIL_RECIPIENT_ADDRESS")
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_RECIPIENT_ADDRESS = (
        ssm.get_parameter(
            Name=env_prefix + "EMAIL_RECIPIENT_ADDRESS", WithDecryption=True
        )
    )["Parameter"]["Value"]
    DEFAULT_FROM_EMAIL = (
        ssm.get_parameter(
            Name=env_prefix + "EMAIL_RECIPIENT_ADDRESS", WithDecryption=True
        )
    )["Parameter"]["Value"]
    SERVER_EMAIL = (
        ssm.get_parameter(
            Name=env_prefix + "EMAIL_RECIPIENT_ADDRESS", WithDecryption=True
        )
    )["Parameter"]["Value"]
    EMAIL_HOST = ssm.get_parameter(Name=env_prefix + "EMAIL_HOST", WithDecryption=True)[
        "Parameter"
    ]["Value"]
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_HOST_USER = ssm.get_parameter(
        Name=env_prefix + "EMAIL_HOST_USER", WithDecryption=True
    )["Parameter"]["Value"]
    EMAIL_HOST_PASSWORD = ssm.get_parameter(
        Name=env_prefix + "EMAIL_HOST_PASSWORD", WithDecryption=True
    )["Parameter"]["Value"]


# django-crispy-forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
